package featdsl.core.utils;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Properties;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.UnsupportedCommandException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.remote.CapabilityType;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;

import aiframework.core.utils.MyRepository;


public class TestBase {
	
	public static RemoteWebDriver driver;
	public static JavascriptExecutor js = (JavascriptExecutor)driver;
	public static Properties CONFIG=null;
	public static MyRepository suiteXls = null;
	public static FileInputStream ip = null;
	public static DesiredCapabilities capabilities = new DesiredCapabilities();
	public static File app;
	public static String platformName;
	public static String Dynamiclocator = "i_";
	public static String fileName=null;
	public static String sheetName=null;

	public static void main(String[] args) {
		
		
	}
	
	public WebElement element(String locator) {

		WebElement element = null;

		try {

			element = driver.findElement(By.id(MyRepository.getNewLocator(fileName, sheetName, locator, "id")));

		} catch (NoSuchElementException|UnsupportedCommandException e) {

			try {

				element = driver.findElement(By.name(MyRepository.getNewLocator(fileName, sheetName, locator, "name")));

			} catch (NoSuchElementException|UnsupportedCommandException e1) {

				try{

					element = driver.findElement(By.className(MyRepository.getNewLocator(fileName, sheetName, locator, "className")));

				}

				catch(NoSuchElementException|UnsupportedCommandException  e2)

				{

					try{

						element=driver.findElement(By.cssSelector(MyRepository.getNewLocator(fileName, sheetName, locator, "cssSelector")));

					}

					catch(NoSuchElementException|UnsupportedCommandException e3){

						try{

							element = driver.findElement(By.linkText(MyRepository.getNewLocator(fileName,sheetName, locator, "linkText")));

						}

						catch(NoSuchElementException|UnsupportedCommandException e4)

						{

							try{

								element = driver.findElement(By.partialLinkText(MyRepository.getNewLocator(fileName,sheetName, locator, "partialLinkText"))); 

							}

							catch(NoSuchElementException|UnsupportedCommandException e5)

							{

								try{

									element = driver.findElement(By.tagName(MyRepository.getNewLocator(fileName,sheetName, locator, "tagName")));

								}

								catch(NoSuchElementException|UnsupportedCommandException e6)

								{

									try{

										element = driver.findElement(By.xpath(MyRepository.getNewLocator(fileName,sheetName, locator, "xpath")));

									}

									catch(NoSuchElementException|UnsupportedCommandException e7)

									{

										e7.printStackTrace();

									}

								}

							}

						}

					}

				}

			}

		}

		return element;
	}
	
	public void initialize() throws IOException{
		CONFIG = new Properties();
		try {
			ip = new FileInputStream(System.getProperty("user.dir")+"//src//test//java//featdsl//core//config//config.properties");
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		CONFIG.load(ip);
		suiteXls = new MyRepository(System.getProperty("user.dir")+"//src//test//java//featdsl//lib//xls//Object_Repository.xls");
	}

	public TestBase applicationPath(String applicationPath) {
		capabilities.setCapability("app", applicationPath);
		return this;
	}

	public TestBase timeOuts(String timeOut) {
		driver.manage().timeouts().implicitlyWait(Long.parseLong(timeOut), TimeUnit.SECONDS);
		return this;
	}

	public TestBase createRemoteDriver(String host, String port){
		try {
			driver = new RemoteWebDriver(new URL("http://"+host+":"+port+"/wd/hub"), capabilities);
		} catch (MalformedURLException e) {
			e.printStackTrace();
		}
		return this;
	}

	public TestBase activityName(String activityName) {
		capabilities.setCapability("appActivity", activityName);
		return this;
	}
	public TestBase packageName(String packageName) {
		capabilities.setCapability("appPackage", packageName);
		return this;
	}
	
	public TestBase deviceName(String deviceName) {
		capabilities.setCapability("deviceName", deviceName);
		return this;
	}

	public TestBase platformVersion(String platformVersion) {
		capabilities.setCapability("platformVersion", platformVersion);
		return this;
	}

	public TestBase platformName(String platformName) {
		capabilities.setCapability("platformName", platformName);
		return this;
	}

	public TestBase appiumVersion(String appiumVersion) {
		capabilities.setCapability("appium-version", appiumVersion);
		return this;
	}
	
	public TestBase browserName(String browserName) {
		capabilities.setCapability(CapabilityType.BROWSER_NAME, browserName);
		return this;
	}
	
	public TestBase deviceType( String deviceType) {
		capabilities.setCapability("device", deviceType);
		return this;
	}

	public TestBase udId( String udId) {
		capabilities.setCapability("udid",udId);
		return this;
	}

	public TestBase bundleId(String bundleId) {
		capabilities.setCapability("bundleId",  bundleId);
		return this;
	}
	
	public void capturescreenshot(String filename){
		File scrFile = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);
		try {
			FileUtils.copyFile(scrFile, new File(System.getProperty("user.dir")+"\\Screenshots\\"+filename+".jpg"));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public TestBase identifyPlatform() {
		System.out.println("platformName= "+platformName);
		if(platformName.equals("Android"))
		{
			Dynamiclocator="a_";
		}else if(platformName.equals("iOS")){
			Dynamiclocator="i_";
		}
		return this;
	}
	public WebElement universalElement(String locatorName) {
		System.out.println(Dynamiclocator+locatorName);
		return element(Dynamiclocator+locatorName);
	}

}
