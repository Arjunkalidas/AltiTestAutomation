package featdsl.core.utils;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Properties;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.remote.CapabilityType;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;


public class TestBase {
	
	public static RemoteWebDriver driver;
	public static JavascriptExecutor js = (JavascriptExecutor)driver;
	public static Properties CONFIG=null;
	public static Xls_Reader suiteXls = null;
	public static FileInputStream ip = null;
	public static DesiredCapabilities capabilities = new DesiredCapabilities();
	public static File app;

	public static void main(String[] args) {
		
		
	}
	
	public void initialize() throws IOException{
		CONFIG = new Properties();
		try {
			ip = new FileInputStream(System.getProperty("user.dir")+"//src//test//java//featdsl//core//config//config.properties");
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		CONFIG.load(ip);
		suiteXls = new Xls_Reader(System.getProperty("user.dir")+"//src//test//java//featdsl//lib//xls//Object_Repository.xls");
	}

	public TestBase applicationPath(String applicationPath) {
		capabilities.setCapability("app", applicationPath);
		return this;
	}

	public TestBase timeOuts(String timeOut) {
		driver.manage().timeouts().implicitlyWait(Long.parseLong(timeOut), TimeUnit.SECONDS);
		return this;
	}

	public TestBase createRemoteDriver(String host, String port){
		try {
			driver = new RemoteWebDriver(new URL("http://"+host+":"+port+"/wd/hub"), capabilities);
		} catch (MalformedURLException e) {
			e.printStackTrace();
		}
		return this;
	}

	public TestBase activityName(String activityName) {
		capabilities.setCapability("appActivity", activityName);
		return this;
	}
	public TestBase packageName(String packageName) {
		capabilities.setCapability("appPackage", packageName);
		return this;
	}
	
	public TestBase deviceName(String deviceName) {
		capabilities.setCapability("deviceName", deviceName);
		return this;
	}

	public TestBase platformVersion(String platformVersion) {
		capabilities.setCapability("platformVersion", platformVersion);
		return this;
	}

	public TestBase platformName(String platformName) {
		capabilities.setCapability("platformName", platformName);
		return this;
	}

	public TestBase appiumVersion(String appiumVersion) {
		capabilities.setCapability("appium-version", appiumVersion);
		return this;
	}
	
	public TestBase browserName(String browserName) {
		capabilities.setCapability(CapabilityType.BROWSER_NAME, browserName);
		return this;
	}
	
	public TestBase deviceType( String deviceType) {
		capabilities.setCapability("device", deviceType);
		return this;
	}

	public TestBase udId( String udId) {
		capabilities.setCapability("udid",udId);
		return this;
	}

	public TestBase bundleId(String bundleId) {
		capabilities.setCapability("bundleId",  bundleId);
		return this;
	}
	
	public void capturescreenshot(String filename){
		File scrFile = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);
		try {
			FileUtils.copyFile(scrFile, new File(System.getProperty("user.dir")+"\\Screenshots\\"+filename+".jpg"));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

}
