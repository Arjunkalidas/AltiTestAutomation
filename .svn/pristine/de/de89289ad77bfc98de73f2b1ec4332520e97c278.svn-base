package aiframework.altimetrik;

import org.openqa.selenium.By;
import org.openqa.selenium.By.ByClassName;
import org.openqa.selenium.By.ByCssSelector;
import org.openqa.selenium.By.ById;
import org.openqa.selenium.By.ByLinkText;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriverBackedSelenium;
import org.openqa.selenium.htmlunit.HtmlUnitDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;


public class AltimetrikHarnessLibrary extends AltimetrikBase {
	static AltimetrikHarnessLibrary AlitmetrikHarnessLibrary=new AltimetrikHarnessLibrary();
	
//	@BeforeSuite 
	public void setup() throws InterruptedException {
		System.out.println("setting up");
		driver=getBrowser(altimetrik_browser);
		driver.get(altimetrik_url);
		driver.manage().window().maximize();
	}

//	@AfterSuite
	public void tearDownFirefoxDriver() {
		System.out.println("shutting down");
		driver.quit();
	}

//	@Test
//	public void taxNebreska() {
//		nebreskaHarnessLibrary
//		.waitForAddressTextBox()
//		.enterAddress("address", address)
//		.enterCity("city", city)
//		.enterMandatoryZip("zip", zip)
//		.enterOptionalZip("plusfour", plusfour)
//		.enterAmount("amount", amount)
//		.clearDate("date")
//		.enterDate("date", date)
//		.submitData()
//		.verifyTaxRate(taxRate);
//	}

	
	public AltimetrikHarnessLibrary waitForAvaTaxPage(String expectedPageTitle) {
		myDynamicWebElement = (new WebDriverWait(driver, 10)).until(ExpectedConditions.presenceOfElementLocated(By.id("address")));
		System.out.println("Waiting for uaddress Text Box");
		String actualPageTitle = driver.getTitle();
		while(!actualPageTitle.equals(expectedPageTitle))
		{
			mail.mailSend(new String []{message,wrongPageLoaded, username,recipients,
				smtp_server,smtp_port,smtp_password});
			tearDownFirefoxDriver();
			break;
		}
		Assert.assertEquals(expectedPageTitle, actualPageTitle);
		return this;
	}

	public AltimetrikHarnessLibrary verifyTaxRate(String expectedTaxRate) {
		myDynamicWebElement = (new WebDriverWait(driver, 10)).until(ExpectedConditions.presenceOfElementLocated(By.xpath("//div[@id='ratesapp']/section/section/div[2]/table/tbody/tr[3]/td[3]")));
		String actualTaxRate = driver.findElement(By.xpath("//div[@id='ratesapp']/section/section/div[2]/table/tbody/tr[3]/td[3]")).getText();
		while(!actualTaxRate.equals(expectedTaxRate))
		{
			mail.mailSend(new String []{message,incorrectCalculation, username,recipients,
					smtp_server,smtp_port,smtp_password});
			tearDownFirefoxDriver();
			break;
		}
		Assert.assertEquals(expectedTaxRate, actualTaxRate);
		System.out.println( actualTaxRate);
		return this;
	}

	public AltimetrikHarnessLibrary submitData() {
		driver.findElement(By.cssSelector("button.button.getRate")).click();
		System.out.println("Submitted the data");
		return this;
	}

	public AltimetrikHarnessLibrary enterDate(String dateLocator, String date) {
		driver.findElement(By.id(dateLocator)).sendKeys(date);
		System.out.println("typed date");
		return this;
	}

	public AltimetrikHarnessLibrary clearDate(String dateLocator) {
		driver.findElement(By.id(dateLocator)).sendKeys(Keys.DELETE);
		System.out.println("clearing date");
		return this;
	}

	public AltimetrikHarnessLibrary enterAmount(String amountLocator, String amount) {
		driver.findElement(By.id(amountLocator)).sendKeys(amount);
		System.out.println("typed amount");
		return this;
	}

	public AltimetrikHarnessLibrary enterOptionalZip(String optionalZipLocator, String optionalZipCode) {
		driver.findElement(By.id(optionalZipLocator)).sendKeys(optionalZipCode);
		System.out.println("typed plusfour");
		return this;
	}

	public AltimetrikHarnessLibrary enterMandatoryZip(String zipCodeLocator, String zip) {
		driver.findElement(By.id(zipCodeLocator)).sendKeys(zip);
		System.out.println("typed zip");
		return this;
	}

	public AltimetrikHarnessLibrary enterCity(String cityLocator, String city) {
		driver.findElement(By.id(cityLocator)).sendKeys(city);
		System.out.println("typed city");
		return this;
	}

	public AltimetrikHarnessLibrary enterAddress(String addressLocator, String address) {
		driver.findElement(By.id(addressLocator)).sendKeys(address);
		System.out.println("typed address");
		return this;
	}
}
